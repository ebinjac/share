// src/lib/ldap.ts (or lib/ldap.ts)

import ldap, {
    Client,                 // Import Client type
    ClientOptions,          // Import ClientOptions
    SearchOptions,          // Import SearchOptions
    SearchEntry,            // Import SearchEntry (we'll get the object from this)
    LDAPResult,             // Import LDAPResult for search end status
    // Note: Specific error classes like InvalidCredentialsError might exist but are not always reliably exported by @types/ldapjs.
    // We'll use instanceof Error and check names/codes as a robust fallback.
    Error as LdapError      // Import LdapError base class (or specific errors if known/exported)
} from 'ldapjs';
import { TlsOptions } from 'tls'; // Standard Node TLS options
import fs from 'fs'; // Needed if using file paths for TLS certs

// Define a stricter type for the expected LDAP user attributes *after* retrieval
// We use `unknown` initially and then validate/cast.
type LdapEntryObject = Record<string, unknown>;

// Interface for the final user object returned by the function for next-auth
export interface LdapUser {
    dn: string;
    uid: string;
    cn: string;
    mail?: string; // Mail is optional
    groups: string[]; // Array of group Common Names (CNs)
}

// Helper to extract CN from a DN string (e.g., "cn=Admins,ou=Groups,dc=..." -> "Admins")
function getCnFromDn(dn: string): string | null {
    // Use a case-insensitive match
    const match = dn.match(/cn=([^,]+)/i);
    return match ? match[1] : null;
}

// Helper to safely get a string attribute from the LDAP entry object
function getStringAttr(entry: LdapEntryObject, attrName: string): string | undefined {
    const value = entry[attrName];
    if (typeof value === 'string' && value.length > 0) {
        return value;
    }
    // Handle cases where AD might return single-element arrays for single-valued attributes
    if (Array.isArray(value) && value.length === 1 && typeof value[0] === 'string') {
       return value[0];
    }
    return undefined;
}

// Helper to safely get the group DNs (handles missing, string, string[])
function getGroupDns(entry: LdapEntryObject, groupAttribute: string): string[] {
    const value = entry[groupAttribute];
    if (typeof value === 'string') {
        return [value]; // Single group membership
    }
    if (Array.isArray(value)) {
        // Filter out any non-string elements just in case
        return value.filter((item): item is string => typeof item === 'string');
    }
    return []; // No groups found or attribute has unexpected type
}


/**
 * Authenticates a user against an LDAP server and retrieves user details including group memberships.
 * Returns a LdapUser object on success, or null if authentication fails (user not found, invalid credentials).
 * Throws an Error for configuration issues or unexpected LDAP errors.
 * @param username - The user's identifier (e.g., uid).
 * @param password - The user's password.
 */
export async function authenticateLdap(username: string, password: string): Promise<LdapUser | null> {

    // --- Configuration with Safety Checks ---
    const ldapUrl = process.env.LDAP_SERVER_URL;
    const bindDn = process.env.LDAP_BIND_DN;
    const bindCredentials = process.env.LDAP_BIND_CREDENTIALS;
    const searchBase = process.env.LDAP_USER_SEARCH_BASE || process.env.LDAP_BASE_DN;
    const groupAttribute = process.env.LDAP_GROUP_ATTRIBUTE || 'memberOf';
    const searchFilterTemplate = process.env.LDAP_USER_SEARCH_FILTER || '(uid={{username}})';

    if (!ldapUrl || !bindDn || !bindCredentials || !searchBase) {
        console.error("LDAP Error: Missing required environment variables (URL, Bind DN, Bind Credentials, Search Base).");
        // Throw configuration error - this isn't an authentication failure
        throw new Error("LDAP configuration is incomplete in environment variables.");
    }

    // Escape username and create final filter (using the correct ldap.escapeFilter)
    const escapedUsername = ldap.escapeFilter(username);
    const searchFilter = searchFilterTemplate.replace('{{username}}', escapedUsername);

    // --- TLS Configuration ---
    const tlsOptions: TlsOptions = {};
    if (ldapUrl.startsWith('ldaps')) {
        // ** PRODUCTION TLS CONFIGURATION IS CRITICAL **
        // You likely need to provide a CA certificate.
        // Example using environment variable for CA cert path:
        if (process.env.LDAP_CA_CERT_PATH) {
           try {
             tlsOptions.ca = [fs.readFileSync(process.env.LDAP_CA_CERT_PATH)];
             console.log(`LDAP TLS: Loaded CA certificate from ${process.env.LDAP_CA_CERT_PATH}`);
           } catch (e: any) {
              console.error(`LDAP TLS Error: Could not read CA cert at ${process.env.LDAP_CA_CERT_PATH}`, e.message);
              throw new Error(`Failed to configure LDAP TLS: ${e.message}`);
           }
         }

        // Add client cert/key if required by server (mTLS)
        // if (process.env.LDAP_CLIENT_CERT_PATH && process.env.LDAP_CLIENT_KEY_PATH) {
        //    tlsOptions.cert = fs.readFileSync(process.env.LDAP_CLIENT_CERT_PATH);
        //    tlsOptions.key = fs.readFileSync(process.env.LDAP_CLIENT_KEY_PATH);
        // }


        // For development/testing with self-signed certs: **NEVER use in Production!**
        // Use an environment variable to explicitly allow this for non-production.
        if (process.env.NODE_ENV !== 'production' && process.env.LDAP_ALLOW_INSECURE_TLS === 'true') {
            console.warn('LDAP TLS Warning: Using rejectUnauthorized: false for LDAPS. DO NOT use in production without proper CA validation.');
            tlsOptions.rejectUnauthorized = false;
        } else if (!tlsOptions.ca && process.env.NODE_ENV === 'production') {
             // Enforce CA cert in production unless explicitly disabled (very risky)
             if (process.env.LDAP_ALLOW_INSECURE_TLS !== 'true') {
                  console.error("LDAP TLS Error: Attempting LDAPS in production without a CA certificate (LDAP_CA_CERT_PATH) and without explicitly allowing insecure TLS (LDAP_ALLOW_INSECURE_TLS=true).");
                  throw new Error("Secure LDAPS configuration required in production.");
             } else {
                  console.warn("LDAP TLS SECURITY WARNING: Running LDAPS in production with LDAP_ALLOW_INSECURE_TLS=true. Certificate validation is disabled. This is highly discouraged.");
                  tlsOptions.rejectUnauthorized = false;
             }
        }
        // If not production and not allowing insecure, but no CA, log a warning
        else if (!tlsOptions.ca && process.env.NODE_ENV !== 'production' && process.env.LDAP_ALLOW_INSECURE_TLS !== 'true'){
             console.warn("LDAP TLS Warning: Attempting LDAPS without a CA certificate (LDAP_CA_CERT_PATH). Connection may fail if server certificate is not trusted by Node's default CAs.");
        }
    }

    // --- Client Setup ---
    const clientOptions: ClientOptions = {
        url: [ldapUrl], // url expects an array
        tlsOptions: Object.keys(tlsOptions).length > 0 ? tlsOptions : undefined,
        connectTimeout: parseInt(process.env.LDAP_CONNECT_TIMEOUT || '5000', 10),
        reconnect: false, // Keep reconnect disabled for auth clarity
    };

    // Declare client outside try block for finally clause
    let client: Client | null = null;

    try {
        client = ldap.createClient(clientOptions);
        let userDn: string | undefined = undefined; // Store the found user DN

        // --- Promisified Operations (Defined inside try to access client) ---
        const bindAsync = (dn: string, creds: string): Promise<void> => new Promise((resolve, reject) => {
            if (!client) return reject(new Error("LDAP client not initialized"));
            client.bind(dn, creds, (err) => {
                if (err) {
                    // Don't log the password itself, just the DN and error
                    console.error(`LDAP Bind Error for DN [${dn}]: ${err.message}`);
                    reject(err); // Reject with LdapError
                } else {
                    resolve();
                }
            });
        });

        const searchAsync = (base: string, opts: SearchOptions): Promise<LdapEntryObject[]> => new Promise((resolve, reject) => {
            if (!client) return reject(new Error("LDAP client not initialized"));
            const entries: LdapEntryObject[] = [];
            client.search(base, opts, (err, res) => {
                if (err) {
                    console.error('LDAP Search Initiation Error:', err.message);
                    return reject(err); // Reject with LdapError
                }
                res.on('searchEntry', (entry: SearchEntry) => {
                    entries.push(entry.object);
                });
                res.on('error', (searchErr: LdapError) => {
                    console.error('LDAP Search Stream Error:', searchErr.message);
                    // Let 'end' event handle final status/rejection
                });
                res.on('end', (result: LDAPResult | null) => {
                    if (result?.status !== 0) {
                        const errMsg = `LDAP search failed: ${result?.errorMessage || 'Unknown error'} (Status: ${result?.status})`;
                        console.error(errMsg);
                        if (entries.length === 0) {
                           reject(new Error(errMsg));
                        } else {
                           console.warn(`LDAP search ended with status ${result.status} but ${entries.length} entries were found. Resolving with found entries.`);
                           resolve(entries);
                        }
                    } else {
                        resolve(entries); // Success
                    }
                });
            });
        });

        const unbindAsync = (): Promise<void> => new Promise((resolve) => {
            if (!client) return resolve(); // No client to unbind
            client.unbind(err => {
                if (err) {
                    console.warn("LDAP Unbind Warning:", err.message);
                }
                resolve(); // Always resolve during cleanup
            });
        });

        // --- Authentication Flow ---
        // 1. Bind with the service account
        console.log(`LDAP: Binding as service account: ${bindDn}`);
        await bindAsync(bindDn, bindCredentials);
        console.log(`LDAP: Service account bind successful.`);

        // 2. Search for the user
        const attributesToFetch = ['dn', 'uid', 'cn', 'sn', 'mail', groupAttribute].filter((v, i, a) => a.indexOf(v) === i); // Ensure unique attributes
        const searchOptions: SearchOptions = {
            filter: searchFilter,
            scope: 'sub',
            attributes: attributesToFetch,
            sizeLimit: 1
        };
        console.log(`LDAP: Searching for user with filter "${searchFilter}" under base "${searchBase}"`);
        const users = await searchAsync(searchBase, searchOptions);

        if (users.length === 0) {
            console.log(`LDAP: User "${username}" not found with filter "${searchFilter}".`);
            return null; // Authentication failure: User not found
        }
        if (users.length > 1) {
            console.warn(`LDAP: Multiple users found for filter "${searchFilter}". Using the first one.`);
        }
        const userEntry = users[0];

        // --- Safely Extract Attributes ---
        userDn = getStringAttr(userEntry, 'dn');
        const uid = getStringAttr(userEntry, 'uid');
        const cn = getStringAttr(userEntry, 'cn');
        const mail = getStringAttr(userEntry, 'mail');

        if (!userDn || !uid) {
            console.error(`LDAP Error: Found entry for "${username}" is missing required attributes 'dn' or 'uid'. Entry keys:`, Object.keys(userEntry));
            // Throw system error - entry is malformed
            throw new Error(`LDAP entry for user ${username} is incomplete.`);
        }
        console.log(`LDAP: Found user DN: ${userDn}, UID: ${uid}`);

        // 3. Attempt to bind as the found user to verify password
        console.log(`LDAP: Attempting bind as user "${userDn}" to verify password...`);
        await bindAsync(userDn, password);
        console.log(`LDAP: User "${username}" authenticated successfully.`);

        // 4. Extract group information safely
        const groupDns = getGroupDns(userEntry, groupAttribute);
        const groupCns = groupDns.map(dn => getCnFromDn(dn)).filter((cn): cn is string => cn !== null);
        console.log(`LDAP: Extracted Group CNs for user "${username}":`, groupCns);

        // 5. Construct the final user object for next-auth
        const finalUser: LdapUser = {
            dn: userDn,
            uid: uid,
            cn: cn || uid, // Fallback to uid if cn is missing
            mail: mail,
            groups: groupCns,
        };

        return finalUser; // AUTHENTICATION SUCCESSFUL

    } catch (error: unknown) {
        console.error('LDAP Authentication Process Failed:', (error instanceof Error ? error.message : error));

        // Check for specific LDAP error types or codes for credentials
        // ldapjs error codes can be checked on the error object, e.g., error.code === 49
        let isInvalidCredentials = false;
        if (error instanceof LdapError) {
             // 49 is typically InvalidCredentialsError code
             if (error.code === 49 || error.name === 'InvalidCredentialsError') {
                 isInvalidCredentials = true;
             }
             // Log LDAP specific error details if available
             console.error(`LDAP Error Details: Name=${error.name}, Code=${error.code}, Message=${error.message}`);
        } else if (error instanceof Error) {
            // Fallback checks if specific type isn't caught
            if (error.message.includes('Invalid Credentials') || error.message.includes('INVALID_CREDENTIALS')) {
                isInvalidCredentials = true;
            }
        }


        if (isInvalidCredentials) {
             console.log(`LDAP: Invalid credentials provided for user "${username}".`);
             return null; // Authentication failure: Invalid credentials
        }

        // For other errors (connection refused, timeout, search errors, config errors caught above)
        // we should ideally not return null, as it masks system problems.
        // Throw the error so it can be logged centrally and potentially return a 500 to the user.
        // Let the `authorize` function in next-auth handle catching this and returning null if necessary,
        // but the error should be thrown from here to indicate a system issue.
        if (error instanceof Error) {
            throw new Error(`LDAP system error during authentication: ${error.message}`);
        } else {
            throw new Error(`LDAP system error during authentication: ${String(error)}`);
        }

    } finally {
        // 6. Always attempt to unbind the client
        if (client) {
            // console.log("LDAP: Cleaning up client connection.");
            // Use a non-throwing unbind in finally
            client.unbind(err => {
                 if (err) console.warn("LDAP Unbind Warning:", err.message);
            });
        }
    }
}
